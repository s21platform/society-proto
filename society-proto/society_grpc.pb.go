// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.2
// source: society.proto

package society_proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	SocietyService_CreateSociety_FullMethodName               = "/SocietyService/CreateSociety"
	SocietyService_UpdateSociety_FullMethodName               = "/SocietyService/UpdateSociety"
	SocietyService_GetSocietyInfo_FullMethodName              = "/SocietyService/GetSocietyInfo"
	SocietyService_RemoveSociety_FullMethodName               = "/SocietyService/RemoveSociety"
	SocietyService_SubscribeToSociety_FullMethodName          = "/SocietyService/SubscribeToSociety"
	SocietyService_UnSubscribeToSociety_FullMethodName        = "/SocietyService/UnSubscribeToSociety"
	SocietyService_GetSocietyWithOffset_FullMethodName        = "/SocietyService/GetSocietyWithOffset"
	SocietyService_GetSocietyForUserWithOffset_FullMethodName = "/SocietyService/GetSocietyForUserWithOffset"
)

// SocietyServiceClient is the client API for SocietyService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SocietyServiceClient interface {
	// Создание сообщества
	CreateSociety(ctx context.Context, in *SetSocietyIn, opts ...grpc.CallOption) (*SetSocietyOut, error)
	// Настройка сообщества
	UpdateSociety(ctx context.Context, in *UpdateSocietyIn, opts ...grpc.CallOption) (*EmptySociety, error)
	// Информация по сообществу
	GetSocietyInfo(ctx context.Context, in *GetSocietyInfoIn, opts ...grpc.CallOption) (*GetSocietyInfoOut, error)
	// Удаление сообщества
	RemoveSociety(ctx context.Context, in *RemoveSocietyIn, opts ...grpc.CallOption) (*EmptySociety, error)
	// Подписка на сообщество
	SubscribeToSociety(ctx context.Context, in *SubscribeToSocietyIn, opts ...grpc.CallOption) (*EmptySociety, error)
	// Отписка от сообщества
	UnSubscribeToSociety(ctx context.Context, in *UnSubscribeToSocietyIn, opts ...grpc.CallOption) (*EmptySociety, error)
	// Список сообществ для поиска по названию сообщества
	GetSocietyWithOffset(ctx context.Context, in *GetSocietyWithOffsetIn, opts ...grpc.CallOption) (*GetSocietyWithOffsetOut, error)
	// Список сообществ юзера
	GetSocietyForUserWithOffset(ctx context.Context, in *GetSocietyForUserWithOffsetIn, opts ...grpc.CallOption) (*GetSocietyForUserWithOffsetOut, error)
}

type societyServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSocietyServiceClient(cc grpc.ClientConnInterface) SocietyServiceClient {
	return &societyServiceClient{cc}
}

func (c *societyServiceClient) CreateSociety(ctx context.Context, in *SetSocietyIn, opts ...grpc.CallOption) (*SetSocietyOut, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetSocietyOut)
	err := c.cc.Invoke(ctx, SocietyService_CreateSociety_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *societyServiceClient) UpdateSociety(ctx context.Context, in *UpdateSocietyIn, opts ...grpc.CallOption) (*EmptySociety, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EmptySociety)
	err := c.cc.Invoke(ctx, SocietyService_UpdateSociety_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *societyServiceClient) GetSocietyInfo(ctx context.Context, in *GetSocietyInfoIn, opts ...grpc.CallOption) (*GetSocietyInfoOut, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetSocietyInfoOut)
	err := c.cc.Invoke(ctx, SocietyService_GetSocietyInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *societyServiceClient) RemoveSociety(ctx context.Context, in *RemoveSocietyIn, opts ...grpc.CallOption) (*EmptySociety, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EmptySociety)
	err := c.cc.Invoke(ctx, SocietyService_RemoveSociety_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *societyServiceClient) SubscribeToSociety(ctx context.Context, in *SubscribeToSocietyIn, opts ...grpc.CallOption) (*EmptySociety, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EmptySociety)
	err := c.cc.Invoke(ctx, SocietyService_SubscribeToSociety_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *societyServiceClient) UnSubscribeToSociety(ctx context.Context, in *UnSubscribeToSocietyIn, opts ...grpc.CallOption) (*EmptySociety, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EmptySociety)
	err := c.cc.Invoke(ctx, SocietyService_UnSubscribeToSociety_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *societyServiceClient) GetSocietyWithOffset(ctx context.Context, in *GetSocietyWithOffsetIn, opts ...grpc.CallOption) (*GetSocietyWithOffsetOut, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetSocietyWithOffsetOut)
	err := c.cc.Invoke(ctx, SocietyService_GetSocietyWithOffset_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *societyServiceClient) GetSocietyForUserWithOffset(ctx context.Context, in *GetSocietyForUserWithOffsetIn, opts ...grpc.CallOption) (*GetSocietyForUserWithOffsetOut, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetSocietyForUserWithOffsetOut)
	err := c.cc.Invoke(ctx, SocietyService_GetSocietyForUserWithOffset_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SocietyServiceServer is the server API for SocietyService service.
// All implementations must embed UnimplementedSocietyServiceServer
// for forward compatibility.
type SocietyServiceServer interface {
	// Создание сообщества
	CreateSociety(context.Context, *SetSocietyIn) (*SetSocietyOut, error)
	// Настройка сообщества
	UpdateSociety(context.Context, *UpdateSocietyIn) (*EmptySociety, error)
	// Информация по сообществу
	GetSocietyInfo(context.Context, *GetSocietyInfoIn) (*GetSocietyInfoOut, error)
	// Удаление сообщества
	RemoveSociety(context.Context, *RemoveSocietyIn) (*EmptySociety, error)
	// Подписка на сообщество
	SubscribeToSociety(context.Context, *SubscribeToSocietyIn) (*EmptySociety, error)
	// Отписка от сообщества
	UnSubscribeToSociety(context.Context, *UnSubscribeToSocietyIn) (*EmptySociety, error)
	// Список сообществ для поиска по названию сообщества
	GetSocietyWithOffset(context.Context, *GetSocietyWithOffsetIn) (*GetSocietyWithOffsetOut, error)
	// Список сообществ юзера
	GetSocietyForUserWithOffset(context.Context, *GetSocietyForUserWithOffsetIn) (*GetSocietyForUserWithOffsetOut, error)
	mustEmbedUnimplementedSocietyServiceServer()
}

// UnimplementedSocietyServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedSocietyServiceServer struct{}

func (UnimplementedSocietyServiceServer) CreateSociety(context.Context, *SetSocietyIn) (*SetSocietyOut, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSociety not implemented")
}
func (UnimplementedSocietyServiceServer) UpdateSociety(context.Context, *UpdateSocietyIn) (*EmptySociety, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSociety not implemented")
}
func (UnimplementedSocietyServiceServer) GetSocietyInfo(context.Context, *GetSocietyInfoIn) (*GetSocietyInfoOut, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSocietyInfo not implemented")
}
func (UnimplementedSocietyServiceServer) RemoveSociety(context.Context, *RemoveSocietyIn) (*EmptySociety, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveSociety not implemented")
}
func (UnimplementedSocietyServiceServer) SubscribeToSociety(context.Context, *SubscribeToSocietyIn) (*EmptySociety, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubscribeToSociety not implemented")
}
func (UnimplementedSocietyServiceServer) UnSubscribeToSociety(context.Context, *UnSubscribeToSocietyIn) (*EmptySociety, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnSubscribeToSociety not implemented")
}
func (UnimplementedSocietyServiceServer) GetSocietyWithOffset(context.Context, *GetSocietyWithOffsetIn) (*GetSocietyWithOffsetOut, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSocietyWithOffset not implemented")
}
func (UnimplementedSocietyServiceServer) GetSocietyForUserWithOffset(context.Context, *GetSocietyForUserWithOffsetIn) (*GetSocietyForUserWithOffsetOut, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSocietyForUserWithOffset not implemented")
}
func (UnimplementedSocietyServiceServer) mustEmbedUnimplementedSocietyServiceServer() {}
func (UnimplementedSocietyServiceServer) testEmbeddedByValue()                        {}

// UnsafeSocietyServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SocietyServiceServer will
// result in compilation errors.
type UnsafeSocietyServiceServer interface {
	mustEmbedUnimplementedSocietyServiceServer()
}

func RegisterSocietyServiceServer(s grpc.ServiceRegistrar, srv SocietyServiceServer) {
	// If the following call pancis, it indicates UnimplementedSocietyServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&SocietyService_ServiceDesc, srv)
}

func _SocietyService_CreateSociety_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetSocietyIn)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SocietyServiceServer).CreateSociety(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SocietyService_CreateSociety_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SocietyServiceServer).CreateSociety(ctx, req.(*SetSocietyIn))
	}
	return interceptor(ctx, in, info, handler)
}

func _SocietyService_UpdateSociety_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSocietyIn)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SocietyServiceServer).UpdateSociety(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SocietyService_UpdateSociety_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SocietyServiceServer).UpdateSociety(ctx, req.(*UpdateSocietyIn))
	}
	return interceptor(ctx, in, info, handler)
}

func _SocietyService_GetSocietyInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSocietyInfoIn)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SocietyServiceServer).GetSocietyInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SocietyService_GetSocietyInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SocietyServiceServer).GetSocietyInfo(ctx, req.(*GetSocietyInfoIn))
	}
	return interceptor(ctx, in, info, handler)
}

func _SocietyService_RemoveSociety_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveSocietyIn)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SocietyServiceServer).RemoveSociety(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SocietyService_RemoveSociety_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SocietyServiceServer).RemoveSociety(ctx, req.(*RemoveSocietyIn))
	}
	return interceptor(ctx, in, info, handler)
}

func _SocietyService_SubscribeToSociety_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubscribeToSocietyIn)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SocietyServiceServer).SubscribeToSociety(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SocietyService_SubscribeToSociety_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SocietyServiceServer).SubscribeToSociety(ctx, req.(*SubscribeToSocietyIn))
	}
	return interceptor(ctx, in, info, handler)
}

func _SocietyService_UnSubscribeToSociety_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnSubscribeToSocietyIn)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SocietyServiceServer).UnSubscribeToSociety(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SocietyService_UnSubscribeToSociety_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SocietyServiceServer).UnSubscribeToSociety(ctx, req.(*UnSubscribeToSocietyIn))
	}
	return interceptor(ctx, in, info, handler)
}

func _SocietyService_GetSocietyWithOffset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSocietyWithOffsetIn)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SocietyServiceServer).GetSocietyWithOffset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SocietyService_GetSocietyWithOffset_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SocietyServiceServer).GetSocietyWithOffset(ctx, req.(*GetSocietyWithOffsetIn))
	}
	return interceptor(ctx, in, info, handler)
}

func _SocietyService_GetSocietyForUserWithOffset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSocietyForUserWithOffsetIn)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SocietyServiceServer).GetSocietyForUserWithOffset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SocietyService_GetSocietyForUserWithOffset_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SocietyServiceServer).GetSocietyForUserWithOffset(ctx, req.(*GetSocietyForUserWithOffsetIn))
	}
	return interceptor(ctx, in, info, handler)
}

// SocietyService_ServiceDesc is the grpc.ServiceDesc for SocietyService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SocietyService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "SocietyService",
	HandlerType: (*SocietyServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateSociety",
			Handler:    _SocietyService_CreateSociety_Handler,
		},
		{
			MethodName: "UpdateSociety",
			Handler:    _SocietyService_UpdateSociety_Handler,
		},
		{
			MethodName: "GetSocietyInfo",
			Handler:    _SocietyService_GetSocietyInfo_Handler,
		},
		{
			MethodName: "RemoveSociety",
			Handler:    _SocietyService_RemoveSociety_Handler,
		},
		{
			MethodName: "SubscribeToSociety",
			Handler:    _SocietyService_SubscribeToSociety_Handler,
		},
		{
			MethodName: "UnSubscribeToSociety",
			Handler:    _SocietyService_UnSubscribeToSociety_Handler,
		},
		{
			MethodName: "GetSocietyWithOffset",
			Handler:    _SocietyService_GetSocietyWithOffset_Handler,
		},
		{
			MethodName: "GetSocietyForUserWithOffset",
			Handler:    _SocietyService_GetSocietyForUserWithOffset_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "society.proto",
}

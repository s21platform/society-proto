// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v5.27.1
// source: society.proto

package society_proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SocietyServiceClient is the client API for SocietyService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SocietyServiceClient interface {
	// Метод создания сообщества
	CreateSociety(ctx context.Context, in *SetSocietyIn, opts ...grpc.CallOption) (*SetSocietyOut, error)
	// Метод получения уровней доступа
	GetAccessLevel(ctx context.Context, in *EmptySociety, opts ...grpc.CallOption) (*GetAccessLevelOut, error)
	// Метод получения разрешения
	GetPermissions(ctx context.Context, in *EmptySociety, opts ...grpc.CallOption) (*GetPermissionsOut, error)
	// Подписка на сообщество
	SubscribeToSociety(ctx context.Context, in *SubscribeToSocietyIn, opts ...grpc.CallOption) (*SubscribeToSocietyOut, error)
	// Отписка от сообщества
	UnsubscribeFromSociety(ctx context.Context, in *UnsubscribeFromSocietyIn, opts ...grpc.CallOption) (*UnsubscribeFromSocietyOut, error)
	// Список юзеров, подписанных на сообщество
	GetUsersForSociety(ctx context.Context, in *GetUsersForSocietyIn, opts ...grpc.CallOption) (*GetUsersForSocietyOut, error)
	// Список сообществ, на которые подписан юзер
	GetSocietiesForUser(ctx context.Context, in *GetSocietiesForUserIn, opts ...grpc.CallOption) (*GetSocietiesForUserOut, error)
}

type societyServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSocietyServiceClient(cc grpc.ClientConnInterface) SocietyServiceClient {
	return &societyServiceClient{cc}
}

func (c *societyServiceClient) CreateSociety(ctx context.Context, in *SetSocietyIn, opts ...grpc.CallOption) (*SetSocietyOut, error) {
	out := new(SetSocietyOut)
	err := c.cc.Invoke(ctx, "/SocietyService/CreateSociety", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *societyServiceClient) GetAccessLevel(ctx context.Context, in *EmptySociety, opts ...grpc.CallOption) (*GetAccessLevelOut, error) {
	out := new(GetAccessLevelOut)
	err := c.cc.Invoke(ctx, "/SocietyService/GetAccessLevel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *societyServiceClient) GetPermissions(ctx context.Context, in *EmptySociety, opts ...grpc.CallOption) (*GetPermissionsOut, error) {
	out := new(GetPermissionsOut)
	err := c.cc.Invoke(ctx, "/SocietyService/GetPermissions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *societyServiceClient) SubscribeToSociety(ctx context.Context, in *SubscribeToSocietyIn, opts ...grpc.CallOption) (*SubscribeToSocietyOut, error) {
	out := new(SubscribeToSocietyOut)
	err := c.cc.Invoke(ctx, "/SocietyService/SubscribeToSociety", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *societyServiceClient) UnsubscribeFromSociety(ctx context.Context, in *UnsubscribeFromSocietyIn, opts ...grpc.CallOption) (*UnsubscribeFromSocietyOut, error) {
	out := new(UnsubscribeFromSocietyOut)
	err := c.cc.Invoke(ctx, "/SocietyService/UnsubscribeFromSociety", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *societyServiceClient) GetUsersForSociety(ctx context.Context, in *GetUsersForSocietyIn, opts ...grpc.CallOption) (*GetUsersForSocietyOut, error) {
	out := new(GetUsersForSocietyOut)
	err := c.cc.Invoke(ctx, "/SocietyService/GetUsersForSociety", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *societyServiceClient) GetSocietiesForUser(ctx context.Context, in *GetSocietiesForUserIn, opts ...grpc.CallOption) (*GetSocietiesForUserOut, error) {
	out := new(GetSocietiesForUserOut)
	err := c.cc.Invoke(ctx, "/SocietyService/GetSocietiesForUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SocietyServiceServer is the server API for SocietyService service.
// All implementations must embed UnimplementedSocietyServiceServer
// for forward compatibility
type SocietyServiceServer interface {
	// Метод создания сообщества
	CreateSociety(context.Context, *SetSocietyIn) (*SetSocietyOut, error)
	// Метод получения уровней доступа
	GetAccessLevel(context.Context, *EmptySociety) (*GetAccessLevelOut, error)
	// Метод получения разрешения
	GetPermissions(context.Context, *EmptySociety) (*GetPermissionsOut, error)
	// Подписка на сообщество
	SubscribeToSociety(context.Context, *SubscribeToSocietyIn) (*SubscribeToSocietyOut, error)
	// Отписка от сообщества
	UnsubscribeFromSociety(context.Context, *UnsubscribeFromSocietyIn) (*UnsubscribeFromSocietyOut, error)
	// Список юзеров, подписанных на сообщество
	GetUsersForSociety(context.Context, *GetUsersForSocietyIn) (*GetUsersForSocietyOut, error)
	// Список сообществ, на которые подписан юзер
	GetSocietiesForUser(context.Context, *GetSocietiesForUserIn) (*GetSocietiesForUserOut, error)
	mustEmbedUnimplementedSocietyServiceServer()
}

// UnimplementedSocietyServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSocietyServiceServer struct {
}

func (UnimplementedSocietyServiceServer) CreateSociety(context.Context, *SetSocietyIn) (*SetSocietyOut, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSociety not implemented")
}
func (UnimplementedSocietyServiceServer) GetAccessLevel(context.Context, *EmptySociety) (*GetAccessLevelOut, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAccessLevel not implemented")
}
func (UnimplementedSocietyServiceServer) GetPermissions(context.Context, *EmptySociety) (*GetPermissionsOut, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPermissions not implemented")
}
func (UnimplementedSocietyServiceServer) SubscribeToSociety(context.Context, *SubscribeToSocietyIn) (*SubscribeToSocietyOut, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubscribeToSociety not implemented")
}
func (UnimplementedSocietyServiceServer) UnsubscribeFromSociety(context.Context, *UnsubscribeFromSocietyIn) (*UnsubscribeFromSocietyOut, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnsubscribeFromSociety not implemented")
}
func (UnimplementedSocietyServiceServer) GetUsersForSociety(context.Context, *GetUsersForSocietyIn) (*GetUsersForSocietyOut, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUsersForSociety not implemented")
}
func (UnimplementedSocietyServiceServer) GetSocietiesForUser(context.Context, *GetSocietiesForUserIn) (*GetSocietiesForUserOut, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSocietiesForUser not implemented")
}
func (UnimplementedSocietyServiceServer) mustEmbedUnimplementedSocietyServiceServer() {}

// UnsafeSocietyServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SocietyServiceServer will
// result in compilation errors.
type UnsafeSocietyServiceServer interface {
	mustEmbedUnimplementedSocietyServiceServer()
}

func RegisterSocietyServiceServer(s grpc.ServiceRegistrar, srv SocietyServiceServer) {
	s.RegisterService(&SocietyService_ServiceDesc, srv)
}

func _SocietyService_CreateSociety_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetSocietyIn)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SocietyServiceServer).CreateSociety(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/SocietyService/CreateSociety",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SocietyServiceServer).CreateSociety(ctx, req.(*SetSocietyIn))
	}
	return interceptor(ctx, in, info, handler)
}

func _SocietyService_GetAccessLevel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptySociety)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SocietyServiceServer).GetAccessLevel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/SocietyService/GetAccessLevel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SocietyServiceServer).GetAccessLevel(ctx, req.(*EmptySociety))
	}
	return interceptor(ctx, in, info, handler)
}

func _SocietyService_GetPermissions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptySociety)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SocietyServiceServer).GetPermissions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/SocietyService/GetPermissions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SocietyServiceServer).GetPermissions(ctx, req.(*EmptySociety))
	}
	return interceptor(ctx, in, info, handler)
}

func _SocietyService_SubscribeToSociety_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubscribeToSocietyIn)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SocietyServiceServer).SubscribeToSociety(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/SocietyService/SubscribeToSociety",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SocietyServiceServer).SubscribeToSociety(ctx, req.(*SubscribeToSocietyIn))
	}
	return interceptor(ctx, in, info, handler)
}

func _SocietyService_UnsubscribeFromSociety_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnsubscribeFromSocietyIn)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SocietyServiceServer).UnsubscribeFromSociety(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/SocietyService/UnsubscribeFromSociety",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SocietyServiceServer).UnsubscribeFromSociety(ctx, req.(*UnsubscribeFromSocietyIn))
	}
	return interceptor(ctx, in, info, handler)
}

func _SocietyService_GetUsersForSociety_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUsersForSocietyIn)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SocietyServiceServer).GetUsersForSociety(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/SocietyService/GetUsersForSociety",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SocietyServiceServer).GetUsersForSociety(ctx, req.(*GetUsersForSocietyIn))
	}
	return interceptor(ctx, in, info, handler)
}

func _SocietyService_GetSocietiesForUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSocietiesForUserIn)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SocietyServiceServer).GetSocietiesForUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/SocietyService/GetSocietiesForUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SocietyServiceServer).GetSocietiesForUser(ctx, req.(*GetSocietiesForUserIn))
	}
	return interceptor(ctx, in, info, handler)
}

// SocietyService_ServiceDesc is the grpc.ServiceDesc for SocietyService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SocietyService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "SocietyService",
	HandlerType: (*SocietyServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateSociety",
			Handler:    _SocietyService_CreateSociety_Handler,
		},
		{
			MethodName: "GetAccessLevel",
			Handler:    _SocietyService_GetAccessLevel_Handler,
		},
		{
			MethodName: "GetPermissions",
			Handler:    _SocietyService_GetPermissions_Handler,
		},
		{
			MethodName: "SubscribeToSociety",
			Handler:    _SocietyService_SubscribeToSociety_Handler,
		},
		{
			MethodName: "UnsubscribeFromSociety",
			Handler:    _SocietyService_UnsubscribeFromSociety_Handler,
		},
		{
			MethodName: "GetUsersForSociety",
			Handler:    _SocietyService_GetUsersForSociety_Handler,
		},
		{
			MethodName: "GetSocietiesForUser",
			Handler:    _SocietyService_GetSocietiesForUser_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "society.proto",
}

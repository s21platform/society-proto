// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v5.27.1
// source: society.proto

package society_proto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type SetSocietyIn struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Название сообщества
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Формат сообщества
	FormatID int64 `protobuf:"varint,2,opt,name=formatID,proto3" json:"formatID,omitempty"`
	// Правила сообщений в сообществе
	PostPermissionID int64 `protobuf:"varint,3,opt,name=postPermissionID,proto3" json:"postPermissionID,omitempty"`
	// Настройка поиска сообщества
	IsSearch bool `protobuf:"varint,4,opt,name=isSearch,proto3" json:"isSearch,omitempty"`
}

func (x *SetSocietyIn) Reset() {
	*x = SetSocietyIn{}
	if protoimpl.UnsafeEnabled {
		mi := &file_society_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetSocietyIn) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetSocietyIn) ProtoMessage() {}

func (x *SetSocietyIn) ProtoReflect() protoreflect.Message {
	mi := &file_society_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetSocietyIn.ProtoReflect.Descriptor instead.
func (*SetSocietyIn) Descriptor() ([]byte, []int) {
	return file_society_proto_rawDescGZIP(), []int{0}
}

func (x *SetSocietyIn) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SetSocietyIn) GetFormatID() int64 {
	if x != nil {
		return x.FormatID
	}
	return 0
}

func (x *SetSocietyIn) GetPostPermissionID() int64 {
	if x != nil {
		return x.PostPermissionID
	}
	return 0
}

func (x *SetSocietyIn) GetIsSearch() bool {
	if x != nil {
		return x.IsSearch
	}
	return false
}

type SetSocietyOut struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// UUID созданного сообщества
	SocietyUUID string `protobuf:"bytes,1,opt,name=societyUUID,proto3" json:"societyUUID,omitempty"`
}

func (x *SetSocietyOut) Reset() {
	*x = SetSocietyOut{}
	if protoimpl.UnsafeEnabled {
		mi := &file_society_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetSocietyOut) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetSocietyOut) ProtoMessage() {}

func (x *SetSocietyOut) ProtoReflect() protoreflect.Message {
	mi := &file_society_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetSocietyOut.ProtoReflect.Descriptor instead.
func (*SetSocietyOut) Descriptor() ([]byte, []int) {
	return file_society_proto_rawDescGZIP(), []int{1}
}

func (x *SetSocietyOut) GetSocietyUUID() string {
	if x != nil {
		return x.SocietyUUID
	}
	return ""
}

type UpdateSocietyIn struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// UUID сообщества
	SocietyUUID string `protobuf:"bytes,1,opt,name=societyUUID,proto3" json:"societyUUID,omitempty"`
	// Название сообщества
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// Описание сообщества
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	// Аватар сообщества
	PhotoURL string `protobuf:"bytes,4,opt,name=photoURL,proto3" json:"photoURL,omitempty"`
	// Формат сообщества
	FormatID int64 `protobuf:"varint,5,opt,name=formatID,proto3" json:"formatID,omitempty"`
	// Правила сообщений в сообществе
	PostPermission int64 `protobuf:"varint,6,opt,name=postPermission,proto3" json:"postPermission,omitempty"`
	// Настройка поиска сообщества
	IsSearch bool `protobuf:"varint,7,opt,name=isSearch,proto3" json:"isSearch,omitempty"`
	// Список тегов сообщества
	TagsID []*TagsID `protobuf:"bytes,8,rep,name=tagsID,proto3" json:"tagsID,omitempty"`
}

func (x *UpdateSocietyIn) Reset() {
	*x = UpdateSocietyIn{}
	if protoimpl.UnsafeEnabled {
		mi := &file_society_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateSocietyIn) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateSocietyIn) ProtoMessage() {}

func (x *UpdateSocietyIn) ProtoReflect() protoreflect.Message {
	mi := &file_society_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateSocietyIn.ProtoReflect.Descriptor instead.
func (*UpdateSocietyIn) Descriptor() ([]byte, []int) {
	return file_society_proto_rawDescGZIP(), []int{2}
}

func (x *UpdateSocietyIn) GetSocietyUUID() string {
	if x != nil {
		return x.SocietyUUID
	}
	return ""
}

func (x *UpdateSocietyIn) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdateSocietyIn) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *UpdateSocietyIn) GetPhotoURL() string {
	if x != nil {
		return x.PhotoURL
	}
	return ""
}

func (x *UpdateSocietyIn) GetFormatID() int64 {
	if x != nil {
		return x.FormatID
	}
	return 0
}

func (x *UpdateSocietyIn) GetPostPermission() int64 {
	if x != nil {
		return x.PostPermission
	}
	return 0
}

func (x *UpdateSocietyIn) GetIsSearch() bool {
	if x != nil {
		return x.IsSearch
	}
	return false
}

func (x *UpdateSocietyIn) GetTagsID() []*TagsID {
	if x != nil {
		return x.TagsID
	}
	return nil
}

type EmptySociety struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *EmptySociety) Reset() {
	*x = EmptySociety{}
	if protoimpl.UnsafeEnabled {
		mi := &file_society_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EmptySociety) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EmptySociety) ProtoMessage() {}

func (x *EmptySociety) ProtoReflect() protoreflect.Message {
	mi := &file_society_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EmptySociety.ProtoReflect.Descriptor instead.
func (*EmptySociety) Descriptor() ([]byte, []int) {
	return file_society_proto_rawDescGZIP(), []int{3}
}

type TagsID struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID тега
	TagID int64 `protobuf:"varint,1,opt,name=tagID,proto3" json:"tagID,omitempty"`
}

func (x *TagsID) Reset() {
	*x = TagsID{}
	if protoimpl.UnsafeEnabled {
		mi := &file_society_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TagsID) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TagsID) ProtoMessage() {}

func (x *TagsID) ProtoReflect() protoreflect.Message {
	mi := &file_society_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TagsID.ProtoReflect.Descriptor instead.
func (*TagsID) Descriptor() ([]byte, []int) {
	return file_society_proto_rawDescGZIP(), []int{4}
}

func (x *TagsID) GetTagID() int64 {
	if x != nil {
		return x.TagID
	}
	return 0
}

type GetSocietyInfoIn struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// UUID сообщества
	SocietyUUID string `protobuf:"bytes,1,opt,name=societyUUID,proto3" json:"societyUUID,omitempty"`
}

func (x *GetSocietyInfoIn) Reset() {
	*x = GetSocietyInfoIn{}
	if protoimpl.UnsafeEnabled {
		mi := &file_society_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSocietyInfoIn) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSocietyInfoIn) ProtoMessage() {}

func (x *GetSocietyInfoIn) ProtoReflect() protoreflect.Message {
	mi := &file_society_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSocietyInfoIn.ProtoReflect.Descriptor instead.
func (*GetSocietyInfoIn) Descriptor() ([]byte, []int) {
	return file_society_proto_rawDescGZIP(), []int{5}
}

func (x *GetSocietyInfoIn) GetSocietyUUID() string {
	if x != nil {
		return x.SocietyUUID
	}
	return ""
}

type GetSocietyInfoOut struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Название сообщества
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Описание сообщества
	Description string `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	// Владелец сообщества
	OwnerUUID string `protobuf:"bytes,3,opt,name=ownerUUID,proto3" json:"ownerUUID,omitempty"`
	// Аватар сообщества
	PhotoURL string `protobuf:"bytes,4,opt,name=photoURL,proto3" json:"photoURL,omitempty"`
	// Формат сообщества
	FormatID int64 `protobuf:"varint,5,opt,name=formatID,proto3" json:"formatID,omitempty"`
	// Правила сообщений в сообществе
	PostPermission int64 `protobuf:"varint,6,opt,name=postPermission,proto3" json:"postPermission,omitempty"`
	// Настройка поиска сообщества
	IsSearch bool `protobuf:"varint,7,opt,name=isSearch,proto3" json:"isSearch,omitempty"`
	// Количество подписчиков сообщества
	CountSubscribe int64 `protobuf:"varint,8,opt,name=countSubscribe,proto3" json:"countSubscribe,omitempty"`
	// Теги сообщества
	TagsID []*TagsID `protobuf:"bytes,9,rep,name=tagsID,proto3" json:"tagsID,omitempty"`
}

func (x *GetSocietyInfoOut) Reset() {
	*x = GetSocietyInfoOut{}
	if protoimpl.UnsafeEnabled {
		mi := &file_society_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSocietyInfoOut) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSocietyInfoOut) ProtoMessage() {}

func (x *GetSocietyInfoOut) ProtoReflect() protoreflect.Message {
	mi := &file_society_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSocietyInfoOut.ProtoReflect.Descriptor instead.
func (*GetSocietyInfoOut) Descriptor() ([]byte, []int) {
	return file_society_proto_rawDescGZIP(), []int{6}
}

func (x *GetSocietyInfoOut) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GetSocietyInfoOut) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *GetSocietyInfoOut) GetOwnerUUID() string {
	if x != nil {
		return x.OwnerUUID
	}
	return ""
}

func (x *GetSocietyInfoOut) GetPhotoURL() string {
	if x != nil {
		return x.PhotoURL
	}
	return ""
}

func (x *GetSocietyInfoOut) GetFormatID() int64 {
	if x != nil {
		return x.FormatID
	}
	return 0
}

func (x *GetSocietyInfoOut) GetPostPermission() int64 {
	if x != nil {
		return x.PostPermission
	}
	return 0
}

func (x *GetSocietyInfoOut) GetIsSearch() bool {
	if x != nil {
		return x.IsSearch
	}
	return false
}

func (x *GetSocietyInfoOut) GetCountSubscribe() int64 {
	if x != nil {
		return x.CountSubscribe
	}
	return 0
}

func (x *GetSocietyInfoOut) GetTagsID() []*TagsID {
	if x != nil {
		return x.TagsID
	}
	return nil
}

type RemoveSocietyIn struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// UUID сообщества
	SocietyUUID string `protobuf:"bytes,1,opt,name=societyUUID,proto3" json:"societyUUID,omitempty"`
}

func (x *RemoveSocietyIn) Reset() {
	*x = RemoveSocietyIn{}
	if protoimpl.UnsafeEnabled {
		mi := &file_society_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveSocietyIn) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveSocietyIn) ProtoMessage() {}

func (x *RemoveSocietyIn) ProtoReflect() protoreflect.Message {
	mi := &file_society_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveSocietyIn.ProtoReflect.Descriptor instead.
func (*RemoveSocietyIn) Descriptor() ([]byte, []int) {
	return file_society_proto_rawDescGZIP(), []int{7}
}

func (x *RemoveSocietyIn) GetSocietyUUID() string {
	if x != nil {
		return x.SocietyUUID
	}
	return ""
}

type SubscribeToSocietyIn struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// UUID сообщества
	SocietyUUID string `protobuf:"bytes,1,opt,name=societyUUID,proto3" json:"societyUUID,omitempty"`
}

func (x *SubscribeToSocietyIn) Reset() {
	*x = SubscribeToSocietyIn{}
	if protoimpl.UnsafeEnabled {
		mi := &file_society_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubscribeToSocietyIn) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscribeToSocietyIn) ProtoMessage() {}

func (x *SubscribeToSocietyIn) ProtoReflect() protoreflect.Message {
	mi := &file_society_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscribeToSocietyIn.ProtoReflect.Descriptor instead.
func (*SubscribeToSocietyIn) Descriptor() ([]byte, []int) {
	return file_society_proto_rawDescGZIP(), []int{8}
}

func (x *SubscribeToSocietyIn) GetSocietyUUID() string {
	if x != nil {
		return x.SocietyUUID
	}
	return ""
}

type UnSubscribeToSocietyIn struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// UUID сообщества
	SocietyUUID string `protobuf:"bytes,1,opt,name=societyUUID,proto3" json:"societyUUID,omitempty"`
}

func (x *UnSubscribeToSocietyIn) Reset() {
	*x = UnSubscribeToSocietyIn{}
	if protoimpl.UnsafeEnabled {
		mi := &file_society_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnSubscribeToSocietyIn) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnSubscribeToSocietyIn) ProtoMessage() {}

func (x *UnSubscribeToSocietyIn) ProtoReflect() protoreflect.Message {
	mi := &file_society_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnSubscribeToSocietyIn.ProtoReflect.Descriptor instead.
func (*UnSubscribeToSocietyIn) Descriptor() ([]byte, []int) {
	return file_society_proto_rawDescGZIP(), []int{9}
}

func (x *UnSubscribeToSocietyIn) GetSocietyUUID() string {
	if x != nil {
		return x.SocietyUUID
	}
	return ""
}

type GetSocietyWithOffsetIn struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Лимит возвращаемых записей
	Limit int64 `protobuf:"varint,1,opt,name=limit,proto3" json:"limit,omitempty"`
	// Тотал записи с которой возвращаем
	Total int64 `protobuf:"varint,2,opt,name=total,proto3" json:"total,omitempty"`
	// Название сообщества по которому происходит поиск, если пусто то все сообщества
	Name string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *GetSocietyWithOffsetIn) Reset() {
	*x = GetSocietyWithOffsetIn{}
	if protoimpl.UnsafeEnabled {
		mi := &file_society_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSocietyWithOffsetIn) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSocietyWithOffsetIn) ProtoMessage() {}

func (x *GetSocietyWithOffsetIn) ProtoReflect() protoreflect.Message {
	mi := &file_society_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSocietyWithOffsetIn.ProtoReflect.Descriptor instead.
func (*GetSocietyWithOffsetIn) Descriptor() ([]byte, []int) {
	return file_society_proto_rawDescGZIP(), []int{10}
}

func (x *GetSocietyWithOffsetIn) GetLimit() int64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *GetSocietyWithOffsetIn) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *GetSocietyWithOffsetIn) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type GetSocietyWithOffsetOut struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Список сообществ
	Societies []*Society `protobuf:"bytes,1,rep,name=societies,proto3" json:"societies,omitempty"`
	// Количество найденых записей
	Total int64 `protobuf:"varint,2,opt,name=total,proto3" json:"total,omitempty"`
}

func (x *GetSocietyWithOffsetOut) Reset() {
	*x = GetSocietyWithOffsetOut{}
	if protoimpl.UnsafeEnabled {
		mi := &file_society_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSocietyWithOffsetOut) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSocietyWithOffsetOut) ProtoMessage() {}

func (x *GetSocietyWithOffsetOut) ProtoReflect() protoreflect.Message {
	mi := &file_society_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSocietyWithOffsetOut.ProtoReflect.Descriptor instead.
func (*GetSocietyWithOffsetOut) Descriptor() ([]byte, []int) {
	return file_society_proto_rawDescGZIP(), []int{11}
}

func (x *GetSocietyWithOffsetOut) GetSocieties() []*Society {
	if x != nil {
		return x.Societies
	}
	return nil
}

func (x *GetSocietyWithOffsetOut) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

type Society struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// UUID сообщества
	SocietyUUID string `protobuf:"bytes,1,opt,name=societyUUID,proto3" json:"societyUUID,omitempty"`
	// Название сообщества
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// Аватар сообщества
	PhotoURL string `protobuf:"bytes,3,opt,name=photoURL,proto3" json:"photoURL,omitempty"`
	// Состоит пользователь в сообществе: true - cocтоит, false - не состоит
	IsMember bool `protobuf:"varint,4,opt,name=isMember,proto3" json:"isMember,omitempty"`
	// Приватное сообщество: true - да, false - нет
	IsPrivate bool `protobuf:"varint,5,opt,name=isPrivate,proto3" json:"isPrivate,omitempty"`
}

func (x *Society) Reset() {
	*x = Society{}
	if protoimpl.UnsafeEnabled {
		mi := &file_society_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Society) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Society) ProtoMessage() {}

func (x *Society) ProtoReflect() protoreflect.Message {
	mi := &file_society_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Society.ProtoReflect.Descriptor instead.
func (*Society) Descriptor() ([]byte, []int) {
	return file_society_proto_rawDescGZIP(), []int{12}
}

func (x *Society) GetSocietyUUID() string {
	if x != nil {
		return x.SocietyUUID
	}
	return ""
}

func (x *Society) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Society) GetPhotoURL() string {
	if x != nil {
		return x.PhotoURL
	}
	return ""
}

func (x *Society) GetIsMember() bool {
	if x != nil {
		return x.IsMember
	}
	return false
}

func (x *Society) GetIsPrivate() bool {
	if x != nil {
		return x.IsPrivate
	}
	return false
}

type GetSocietyForUserWithOffsetIn struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Лимит возвращаемых записей
	Limit int64 `protobuf:"varint,1,opt,name=limit,proto3" json:"limit,omitempty"`
	// Тотал записи с которой возвращаем
	Total int64 `protobuf:"varint,2,opt,name=total,proto3" json:"total,omitempty"`
	// UUID пользователя
	UserUUID string `protobuf:"bytes,3,opt,name=userUUID,proto3" json:"userUUID,omitempty"`
}

func (x *GetSocietyForUserWithOffsetIn) Reset() {
	*x = GetSocietyForUserWithOffsetIn{}
	if protoimpl.UnsafeEnabled {
		mi := &file_society_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSocietyForUserWithOffsetIn) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSocietyForUserWithOffsetIn) ProtoMessage() {}

func (x *GetSocietyForUserWithOffsetIn) ProtoReflect() protoreflect.Message {
	mi := &file_society_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSocietyForUserWithOffsetIn.ProtoReflect.Descriptor instead.
func (*GetSocietyForUserWithOffsetIn) Descriptor() ([]byte, []int) {
	return file_society_proto_rawDescGZIP(), []int{13}
}

func (x *GetSocietyForUserWithOffsetIn) GetLimit() int64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *GetSocietyForUserWithOffsetIn) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *GetSocietyForUserWithOffsetIn) GetUserUUID() string {
	if x != nil {
		return x.UserUUID
	}
	return ""
}

type GetSocietyForUserWithOffsetOut struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Список сообществ
	Societies []*Society `protobuf:"bytes,1,rep,name=societies,proto3" json:"societies,omitempty"`
	// Количество найденых записей
	Total int64 `protobuf:"varint,2,opt,name=total,proto3" json:"total,omitempty"`
}

func (x *GetSocietyForUserWithOffsetOut) Reset() {
	*x = GetSocietyForUserWithOffsetOut{}
	if protoimpl.UnsafeEnabled {
		mi := &file_society_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSocietyForUserWithOffsetOut) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSocietyForUserWithOffsetOut) ProtoMessage() {}

func (x *GetSocietyForUserWithOffsetOut) ProtoReflect() protoreflect.Message {
	mi := &file_society_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSocietyForUserWithOffsetOut.ProtoReflect.Descriptor instead.
func (*GetSocietyForUserWithOffsetOut) Descriptor() ([]byte, []int) {
	return file_society_proto_rawDescGZIP(), []int{14}
}

func (x *GetSocietyForUserWithOffsetOut) GetSocieties() []*Society {
	if x != nil {
		return x.Societies
	}
	return nil
}

func (x *GetSocietyForUserWithOffsetOut) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

var File_society_proto protoreflect.FileDescriptor

var file_society_proto_rawDesc = []byte{
	0x0a, 0x0d, 0x73, 0x6f, 0x63, 0x69, 0x65, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0x86, 0x01, 0x0a, 0x0c, 0x53, 0x65, 0x74, 0x53, 0x6f, 0x63, 0x69, 0x65, 0x74, 0x79, 0x49, 0x6e,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x49, 0x44,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x49, 0x44,
	0x12, 0x2a, 0x0a, 0x10, 0x70, 0x6f, 0x73, 0x74, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x70, 0x6f, 0x73, 0x74,
	0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08,
	0x69, 0x73, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08,
	0x69, 0x73, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x22, 0x31, 0x0a, 0x0d, 0x53, 0x65, 0x74, 0x53,
	0x6f, 0x63, 0x69, 0x65, 0x74, 0x79, 0x4f, 0x75, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x6f, 0x63,
	0x69, 0x65, 0x74, 0x79, 0x55, 0x55, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x73, 0x6f, 0x63, 0x69, 0x65, 0x74, 0x79, 0x55, 0x55, 0x49, 0x44, 0x22, 0x86, 0x02, 0x0a, 0x0f,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x6f, 0x63, 0x69, 0x65, 0x74, 0x79, 0x49, 0x6e, 0x12,
	0x20, 0x0a, 0x0b, 0x73, 0x6f, 0x63, 0x69, 0x65, 0x74, 0x79, 0x55, 0x55, 0x49, 0x44, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x6f, 0x63, 0x69, 0x65, 0x74, 0x79, 0x55, 0x55, 0x49,
	0x44, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x68, 0x6f, 0x74, 0x6f,
	0x55, 0x52, 0x4c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x68, 0x6f, 0x74, 0x6f,
	0x55, 0x52, 0x4c, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x49, 0x44, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x49, 0x44, 0x12,
	0x26, 0x0a, 0x0e, 0x70, 0x6f, 0x73, 0x74, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x70, 0x6f, 0x73, 0x74, 0x50, 0x65, 0x72,
	0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x73, 0x53, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x53, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x12, 0x1f, 0x0a, 0x06, 0x74, 0x61, 0x67, 0x73, 0x49, 0x44, 0x18, 0x08, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x07, 0x2e, 0x54, 0x61, 0x67, 0x73, 0x49, 0x44, 0x52, 0x06, 0x74, 0x61,
	0x67, 0x73, 0x49, 0x44, 0x22, 0x0e, 0x0a, 0x0c, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x53, 0x6f, 0x63,
	0x69, 0x65, 0x74, 0x79, 0x22, 0x1e, 0x0a, 0x06, 0x54, 0x61, 0x67, 0x73, 0x49, 0x44, 0x12, 0x14,
	0x0a, 0x05, 0x74, 0x61, 0x67, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74,
	0x61, 0x67, 0x49, 0x44, 0x22, 0x34, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x53, 0x6f, 0x63, 0x69, 0x65,
	0x74, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x49, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x6f, 0x63, 0x69,
	0x65, 0x74, 0x79, 0x55, 0x55, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73,
	0x6f, 0x63, 0x69, 0x65, 0x74, 0x79, 0x55, 0x55, 0x49, 0x44, 0x22, 0xac, 0x02, 0x0a, 0x11, 0x47,
	0x65, 0x74, 0x53, 0x6f, 0x63, 0x69, 0x65, 0x74, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x4f, 0x75, 0x74,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x55,
	0x55, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6f, 0x77, 0x6e, 0x65, 0x72,
	0x55, 0x55, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x55, 0x52, 0x4c,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x55, 0x52, 0x4c,
	0x12, 0x1a, 0x0a, 0x08, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x49, 0x44, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x08, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x49, 0x44, 0x12, 0x26, 0x0a, 0x0e,
	0x70, 0x6f, 0x73, 0x74, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x70, 0x6f, 0x73, 0x74, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x73, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x12, 0x26, 0x0a, 0x0e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69,
	0x62, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x53,
	0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x12, 0x1f, 0x0a, 0x06, 0x74, 0x61, 0x67, 0x73,
	0x49, 0x44, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x07, 0x2e, 0x54, 0x61, 0x67, 0x73, 0x49,
	0x44, 0x52, 0x06, 0x74, 0x61, 0x67, 0x73, 0x49, 0x44, 0x22, 0x33, 0x0a, 0x0f, 0x52, 0x65, 0x6d,
	0x6f, 0x76, 0x65, 0x53, 0x6f, 0x63, 0x69, 0x65, 0x74, 0x79, 0x49, 0x6e, 0x12, 0x20, 0x0a, 0x0b,
	0x73, 0x6f, 0x63, 0x69, 0x65, 0x74, 0x79, 0x55, 0x55, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x73, 0x6f, 0x63, 0x69, 0x65, 0x74, 0x79, 0x55, 0x55, 0x49, 0x44, 0x22, 0x38,
	0x0a, 0x14, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x54, 0x6f, 0x53, 0x6f, 0x63,
	0x69, 0x65, 0x74, 0x79, 0x49, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x6f, 0x63, 0x69, 0x65, 0x74,
	0x79, 0x55, 0x55, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x6f, 0x63,
	0x69, 0x65, 0x74, 0x79, 0x55, 0x55, 0x49, 0x44, 0x22, 0x3a, 0x0a, 0x16, 0x55, 0x6e, 0x53, 0x75,
	0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x54, 0x6f, 0x53, 0x6f, 0x63, 0x69, 0x65, 0x74, 0x79,
	0x49, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x6f, 0x63, 0x69, 0x65, 0x74, 0x79, 0x55, 0x55, 0x49,
	0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x6f, 0x63, 0x69, 0x65, 0x74, 0x79,
	0x55, 0x55, 0x49, 0x44, 0x22, 0x58, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x53, 0x6f, 0x63, 0x69, 0x65,
	0x74, 0x79, 0x57, 0x69, 0x74, 0x68, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x49, 0x6e, 0x12, 0x14,
	0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x57,
	0x0a, 0x17, 0x47, 0x65, 0x74, 0x53, 0x6f, 0x63, 0x69, 0x65, 0x74, 0x79, 0x57, 0x69, 0x74, 0x68,
	0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x4f, 0x75, 0x74, 0x12, 0x26, 0x0a, 0x09, 0x73, 0x6f, 0x63,
	0x69, 0x65, 0x74, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x53,
	0x6f, 0x63, 0x69, 0x65, 0x74, 0x79, 0x52, 0x09, 0x73, 0x6f, 0x63, 0x69, 0x65, 0x74, 0x69, 0x65,
	0x73, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x22, 0x95, 0x01, 0x0a, 0x07, 0x53, 0x6f, 0x63, 0x69,
	0x65, 0x74, 0x79, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x6f, 0x63, 0x69, 0x65, 0x74, 0x79, 0x55, 0x55,
	0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x6f, 0x63, 0x69, 0x65, 0x74,
	0x79, 0x55, 0x55, 0x49, 0x44, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x68, 0x6f,
	0x74, 0x6f, 0x55, 0x52, 0x4c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x68, 0x6f,
	0x74, 0x6f, 0x55, 0x52, 0x4c, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x73, 0x4d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x4d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x73, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x22,
	0x67, 0x0a, 0x1d, 0x47, 0x65, 0x74, 0x53, 0x6f, 0x63, 0x69, 0x65, 0x74, 0x79, 0x46, 0x6f, 0x72,
	0x55, 0x73, 0x65, 0x72, 0x57, 0x69, 0x74, 0x68, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x49, 0x6e,
	0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x1a, 0x0a, 0x08,
	0x75, 0x73, 0x65, 0x72, 0x55, 0x55, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x75, 0x73, 0x65, 0x72, 0x55, 0x55, 0x49, 0x44, 0x22, 0x5e, 0x0a, 0x1e, 0x47, 0x65, 0x74, 0x53,
	0x6f, 0x63, 0x69, 0x65, 0x74, 0x79, 0x46, 0x6f, 0x72, 0x55, 0x73, 0x65, 0x72, 0x57, 0x69, 0x74,
	0x68, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x4f, 0x75, 0x74, 0x12, 0x26, 0x0a, 0x09, 0x73, 0x6f,
	0x63, 0x69, 0x65, 0x74, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x08, 0x2e,
	0x53, 0x6f, 0x63, 0x69, 0x65, 0x74, 0x79, 0x52, 0x09, 0x73, 0x6f, 0x63, 0x69, 0x65, 0x74, 0x69,
	0x65, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x32, 0x84, 0x04, 0x0a, 0x0e, 0x53, 0x6f, 0x63,
	0x69, 0x65, 0x74, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x2e, 0x0a, 0x0d, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x6f, 0x63, 0x69, 0x65, 0x74, 0x79, 0x12, 0x0d, 0x2e, 0x53,
	0x65, 0x74, 0x53, 0x6f, 0x63, 0x69, 0x65, 0x74, 0x79, 0x49, 0x6e, 0x1a, 0x0e, 0x2e, 0x53, 0x65,
	0x74, 0x53, 0x6f, 0x63, 0x69, 0x65, 0x74, 0x79, 0x4f, 0x75, 0x74, 0x12, 0x30, 0x0a, 0x0d, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x6f, 0x63, 0x69, 0x65, 0x74, 0x79, 0x12, 0x10, 0x2e, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x6f, 0x63, 0x69, 0x65, 0x74, 0x79, 0x49, 0x6e, 0x1a, 0x0d,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x53, 0x6f, 0x63, 0x69, 0x65, 0x74, 0x79, 0x12, 0x37, 0x0a,
	0x0e, 0x47, 0x65, 0x74, 0x53, 0x6f, 0x63, 0x69, 0x65, 0x74, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x11, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x6f, 0x63, 0x69, 0x65, 0x74, 0x79, 0x49, 0x6e, 0x66, 0x6f,
	0x49, 0x6e, 0x1a, 0x12, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x6f, 0x63, 0x69, 0x65, 0x74, 0x79, 0x49,
	0x6e, 0x66, 0x6f, 0x4f, 0x75, 0x74, 0x12, 0x30, 0x0a, 0x0d, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65,
	0x53, 0x6f, 0x63, 0x69, 0x65, 0x74, 0x79, 0x12, 0x10, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65,
	0x53, 0x6f, 0x63, 0x69, 0x65, 0x74, 0x79, 0x49, 0x6e, 0x1a, 0x0d, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x53, 0x6f, 0x63, 0x69, 0x65, 0x74, 0x79, 0x12, 0x3a, 0x0a, 0x12, 0x53, 0x75, 0x62, 0x73,
	0x63, 0x72, 0x69, 0x62, 0x65, 0x54, 0x6f, 0x53, 0x6f, 0x63, 0x69, 0x65, 0x74, 0x79, 0x12, 0x15,
	0x2e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x54, 0x6f, 0x53, 0x6f, 0x63, 0x69,
	0x65, 0x74, 0x79, 0x49, 0x6e, 0x1a, 0x0d, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x53, 0x6f, 0x63,
	0x69, 0x65, 0x74, 0x79, 0x12, 0x3e, 0x0a, 0x14, 0x55, 0x6e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72,
	0x69, 0x62, 0x65, 0x54, 0x6f, 0x53, 0x6f, 0x63, 0x69, 0x65, 0x74, 0x79, 0x12, 0x17, 0x2e, 0x55,
	0x6e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x54, 0x6f, 0x53, 0x6f, 0x63, 0x69,
	0x65, 0x74, 0x79, 0x49, 0x6e, 0x1a, 0x0d, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x53, 0x6f, 0x63,
	0x69, 0x65, 0x74, 0x79, 0x12, 0x49, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x53, 0x6f, 0x63, 0x69, 0x65,
	0x74, 0x79, 0x57, 0x69, 0x74, 0x68, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x17, 0x2e, 0x47,
	0x65, 0x74, 0x53, 0x6f, 0x63, 0x69, 0x65, 0x74, 0x79, 0x57, 0x69, 0x74, 0x68, 0x4f, 0x66, 0x66,
	0x73, 0x65, 0x74, 0x49, 0x6e, 0x1a, 0x18, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x6f, 0x63, 0x69, 0x65,
	0x74, 0x79, 0x57, 0x69, 0x74, 0x68, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x4f, 0x75, 0x74, 0x12,
	0x5e, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x53, 0x6f, 0x63, 0x69, 0x65, 0x74, 0x79, 0x46, 0x6f, 0x72,
	0x55, 0x73, 0x65, 0x72, 0x57, 0x69, 0x74, 0x68, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x1e,
	0x2e, 0x47, 0x65, 0x74, 0x53, 0x6f, 0x63, 0x69, 0x65, 0x74, 0x79, 0x46, 0x6f, 0x72, 0x55, 0x73,
	0x65, 0x72, 0x57, 0x69, 0x74, 0x68, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x49, 0x6e, 0x1a, 0x1f,
	0x2e, 0x47, 0x65, 0x74, 0x53, 0x6f, 0x63, 0x69, 0x65, 0x74, 0x79, 0x46, 0x6f, 0x72, 0x55, 0x73,
	0x65, 0x72, 0x57, 0x69, 0x74, 0x68, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x4f, 0x75, 0x74, 0x42,
	0x11, 0x5a, 0x0f, 0x2e, 0x2f, 0x73, 0x6f, 0x63, 0x69, 0x65, 0x74, 0x79, 0x2d, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_society_proto_rawDescOnce sync.Once
	file_society_proto_rawDescData = file_society_proto_rawDesc
)

func file_society_proto_rawDescGZIP() []byte {
	file_society_proto_rawDescOnce.Do(func() {
		file_society_proto_rawDescData = protoimpl.X.CompressGZIP(file_society_proto_rawDescData)
	})
	return file_society_proto_rawDescData
}

var file_society_proto_msgTypes = make([]protoimpl.MessageInfo, 15)
var file_society_proto_goTypes = []interface{}{
	(*SetSocietyIn)(nil),                   // 0: SetSocietyIn
	(*SetSocietyOut)(nil),                  // 1: SetSocietyOut
	(*UpdateSocietyIn)(nil),                // 2: UpdateSocietyIn
	(*EmptySociety)(nil),                   // 3: EmptySociety
	(*TagsID)(nil),                         // 4: TagsID
	(*GetSocietyInfoIn)(nil),               // 5: GetSocietyInfoIn
	(*GetSocietyInfoOut)(nil),              // 6: GetSocietyInfoOut
	(*RemoveSocietyIn)(nil),                // 7: RemoveSocietyIn
	(*SubscribeToSocietyIn)(nil),           // 8: SubscribeToSocietyIn
	(*UnSubscribeToSocietyIn)(nil),         // 9: UnSubscribeToSocietyIn
	(*GetSocietyWithOffsetIn)(nil),         // 10: GetSocietyWithOffsetIn
	(*GetSocietyWithOffsetOut)(nil),        // 11: GetSocietyWithOffsetOut
	(*Society)(nil),                        // 12: Society
	(*GetSocietyForUserWithOffsetIn)(nil),  // 13: GetSocietyForUserWithOffsetIn
	(*GetSocietyForUserWithOffsetOut)(nil), // 14: GetSocietyForUserWithOffsetOut
}
var file_society_proto_depIdxs = []int32{
	4,  // 0: UpdateSocietyIn.tagsID:type_name -> TagsID
	4,  // 1: GetSocietyInfoOut.tagsID:type_name -> TagsID
	12, // 2: GetSocietyWithOffsetOut.societies:type_name -> Society
	12, // 3: GetSocietyForUserWithOffsetOut.societies:type_name -> Society
	0,  // 4: SocietyService.CreateSociety:input_type -> SetSocietyIn
	2,  // 5: SocietyService.UpdateSociety:input_type -> UpdateSocietyIn
	5,  // 6: SocietyService.GetSocietyInfo:input_type -> GetSocietyInfoIn
	7,  // 7: SocietyService.RemoveSociety:input_type -> RemoveSocietyIn
	8,  // 8: SocietyService.SubscribeToSociety:input_type -> SubscribeToSocietyIn
	9,  // 9: SocietyService.UnSubscribeToSociety:input_type -> UnSubscribeToSocietyIn
	10, // 10: SocietyService.GetSocietyWithOffset:input_type -> GetSocietyWithOffsetIn
	13, // 11: SocietyService.GetSocietyForUserWithOffset:input_type -> GetSocietyForUserWithOffsetIn
	1,  // 12: SocietyService.CreateSociety:output_type -> SetSocietyOut
	3,  // 13: SocietyService.UpdateSociety:output_type -> EmptySociety
	6,  // 14: SocietyService.GetSocietyInfo:output_type -> GetSocietyInfoOut
	3,  // 15: SocietyService.RemoveSociety:output_type -> EmptySociety
	3,  // 16: SocietyService.SubscribeToSociety:output_type -> EmptySociety
	3,  // 17: SocietyService.UnSubscribeToSociety:output_type -> EmptySociety
	11, // 18: SocietyService.GetSocietyWithOffset:output_type -> GetSocietyWithOffsetOut
	14, // 19: SocietyService.GetSocietyForUserWithOffset:output_type -> GetSocietyForUserWithOffsetOut
	12, // [12:20] is the sub-list for method output_type
	4,  // [4:12] is the sub-list for method input_type
	4,  // [4:4] is the sub-list for extension type_name
	4,  // [4:4] is the sub-list for extension extendee
	0,  // [0:4] is the sub-list for field type_name
}

func init() { file_society_proto_init() }
func file_society_proto_init() {
	if File_society_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_society_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetSocietyIn); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_society_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetSocietyOut); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_society_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateSocietyIn); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_society_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EmptySociety); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_society_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TagsID); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_society_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSocietyInfoIn); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_society_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSocietyInfoOut); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_society_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveSocietyIn); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_society_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubscribeToSocietyIn); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_society_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UnSubscribeToSocietyIn); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_society_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSocietyWithOffsetIn); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_society_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSocietyWithOffsetOut); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_society_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Society); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_society_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSocietyForUserWithOffsetIn); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_society_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSocietyForUserWithOffsetOut); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_society_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   15,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_society_proto_goTypes,
		DependencyIndexes: file_society_proto_depIdxs,
		MessageInfos:      file_society_proto_msgTypes,
	}.Build()
	File_society_proto = out.File
	file_society_proto_rawDesc = nil
	file_society_proto_goTypes = nil
	file_society_proto_depIdxs = nil
}

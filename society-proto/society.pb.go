// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.2
// 	protoc        v5.28.0
// source: society.proto

package society_proto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Данные для создания сообщества
type SetSocietyIn struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Имя
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Описание
	Description string `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	// Приватность
	IsPrivate bool `protobuf:"varint,3,opt,name=is_private,json=isPrivate,proto3" json:"is_private,omitempty"`
	// Направление
	DirectionId int64 `protobuf:"varint,4,opt,name=direction_id,json=directionId,proto3" json:"direction_id,omitempty"`
	// Уровень доступа
	AccessLevelId int64 `protobuf:"varint,5,opt,name=access_level_id,json=accessLevelId,proto3" json:"access_level_id,omitempty"`
}

func (x *SetSocietyIn) Reset() {
	*x = SetSocietyIn{}
	mi := &file_society_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetSocietyIn) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetSocietyIn) ProtoMessage() {}

func (x *SetSocietyIn) ProtoReflect() protoreflect.Message {
	mi := &file_society_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetSocietyIn.ProtoReflect.Descriptor instead.
func (*SetSocietyIn) Descriptor() ([]byte, []int) {
	return file_society_proto_rawDescGZIP(), []int{0}
}

func (x *SetSocietyIn) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SetSocietyIn) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *SetSocietyIn) GetIsPrivate() bool {
	if x != nil {
		return x.IsPrivate
	}
	return false
}

func (x *SetSocietyIn) GetDirectionId() int64 {
	if x != nil {
		return x.DirectionId
	}
	return 0
}

func (x *SetSocietyIn) GetAccessLevelId() int64 {
	if x != nil {
		return x.AccessLevelId
	}
	return 0
}

// Объект ответа создания сообщества
type SetSocietyOut struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// id созданного сообщества
	SocietyId int64 `protobuf:"varint,1,opt,name=society_id,json=societyId,proto3" json:"society_id,omitempty"`
}

func (x *SetSocietyOut) Reset() {
	*x = SetSocietyOut{}
	mi := &file_society_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetSocietyOut) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetSocietyOut) ProtoMessage() {}

func (x *SetSocietyOut) ProtoReflect() protoreflect.Message {
	mi := &file_society_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetSocietyOut.ProtoReflect.Descriptor instead.
func (*SetSocietyOut) Descriptor() ([]byte, []int) {
	return file_society_proto_rawDescGZIP(), []int{1}
}

func (x *SetSocietyOut) GetSocietyId() int64 {
	if x != nil {
		return x.SocietyId
	}
	return 0
}

// Объект возвращения уровней доступа
type GetAccessLevelOut struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Список уровней доступа
	Levels []*AccessLevel `protobuf:"bytes,1,rep,name=levels,proto3" json:"levels,omitempty"`
}

func (x *GetAccessLevelOut) Reset() {
	*x = GetAccessLevelOut{}
	mi := &file_society_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetAccessLevelOut) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAccessLevelOut) ProtoMessage() {}

func (x *GetAccessLevelOut) ProtoReflect() protoreflect.Message {
	mi := &file_society_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAccessLevelOut.ProtoReflect.Descriptor instead.
func (*GetAccessLevelOut) Descriptor() ([]byte, []int) {
	return file_society_proto_rawDescGZIP(), []int{2}
}

func (x *GetAccessLevelOut) GetLevels() []*AccessLevel {
	if x != nil {
		return x.Levels
	}
	return nil
}

// Описание уровней доступа
type AccessLevel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Идентификатор уровня доступа
	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// Название или описание уровня доступа
	AccessLevel string `protobuf:"bytes,2,opt,name=access_level,json=accessLevel,proto3" json:"access_level,omitempty"`
}

func (x *AccessLevel) Reset() {
	*x = AccessLevel{}
	mi := &file_society_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AccessLevel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessLevel) ProtoMessage() {}

func (x *AccessLevel) ProtoReflect() protoreflect.Message {
	mi := &file_society_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessLevel.ProtoReflect.Descriptor instead.
func (*AccessLevel) Descriptor() ([]byte, []int) {
	return file_society_proto_rawDescGZIP(), []int{3}
}

func (x *AccessLevel) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *AccessLevel) GetAccessLevel() string {
	if x != nil {
		return x.AccessLevel
	}
	return ""
}

// Пустой объект
type EmptySociety struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *EmptySociety) Reset() {
	*x = EmptySociety{}
	mi := &file_society_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EmptySociety) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EmptySociety) ProtoMessage() {}

func (x *EmptySociety) ProtoReflect() protoreflect.Message {
	mi := &file_society_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EmptySociety.ProtoReflect.Descriptor instead.
func (*EmptySociety) Descriptor() ([]byte, []int) {
	return file_society_proto_rawDescGZIP(), []int{4}
}

// Объект возвращения списка разрешений
type GetPermissionsOut struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Список разрешений.
	Permissions []*Permission `protobuf:"bytes,1,rep,name=permissions,proto3" json:"permissions,omitempty"`
}

func (x *GetPermissionsOut) Reset() {
	*x = GetPermissionsOut{}
	mi := &file_society_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetPermissionsOut) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPermissionsOut) ProtoMessage() {}

func (x *GetPermissionsOut) ProtoReflect() protoreflect.Message {
	mi := &file_society_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPermissionsOut.ProtoReflect.Descriptor instead.
func (*GetPermissionsOut) Descriptor() ([]byte, []int) {
	return file_society_proto_rawDescGZIP(), []int{5}
}

func (x *GetPermissionsOut) GetPermissions() []*Permission {
	if x != nil {
		return x.Permissions
	}
	return nil
}

// Описание разрешения
type Permission struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Уникальный идентификатор разрешения
	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// Название разрешения
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// Описание разрешения
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
}

func (x *Permission) Reset() {
	*x = Permission{}
	mi := &file_society_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Permission) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Permission) ProtoMessage() {}

func (x *Permission) ProtoReflect() protoreflect.Message {
	mi := &file_society_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Permission.ProtoReflect.Descriptor instead.
func (*Permission) Descriptor() ([]byte, []int) {
	return file_society_proto_rawDescGZIP(), []int{6}
}

func (x *Permission) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Permission) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Permission) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

// Данные для подписки на сообщество
type SubscribeToSocietyIn struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID сообщества
	SocietyId int64 `protobuf:"varint,1,opt,name=society_id,json=societyId,proto3" json:"society_id,omitempty"`
}

func (x *SubscribeToSocietyIn) Reset() {
	*x = SubscribeToSocietyIn{}
	mi := &file_society_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SubscribeToSocietyIn) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscribeToSocietyIn) ProtoMessage() {}

func (x *SubscribeToSocietyIn) ProtoReflect() protoreflect.Message {
	mi := &file_society_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscribeToSocietyIn.ProtoReflect.Descriptor instead.
func (*SubscribeToSocietyIn) Descriptor() ([]byte, []int) {
	return file_society_proto_rawDescGZIP(), []int{7}
}

func (x *SubscribeToSocietyIn) GetSocietyId() int64 {
	if x != nil {
		return x.SocietyId
	}
	return 0
}

// Возвращение данных о подписке на сообщество
type SubscribeToSocietyOut struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Получилось ли подписаться или нет
	Success bool `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
}

func (x *SubscribeToSocietyOut) Reset() {
	*x = SubscribeToSocietyOut{}
	mi := &file_society_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SubscribeToSocietyOut) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscribeToSocietyOut) ProtoMessage() {}

func (x *SubscribeToSocietyOut) ProtoReflect() protoreflect.Message {
	mi := &file_society_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscribeToSocietyOut.ProtoReflect.Descriptor instead.
func (*SubscribeToSocietyOut) Descriptor() ([]byte, []int) {
	return file_society_proto_rawDescGZIP(), []int{8}
}

func (x *SubscribeToSocietyOut) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

// Данные для отписки от сообщества
type UnsubscribeFromSocietyIn struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID сообщества
	SocietyId int64 `protobuf:"varint,1,opt,name=society_id,json=societyId,proto3" json:"society_id,omitempty"`
}

func (x *UnsubscribeFromSocietyIn) Reset() {
	*x = UnsubscribeFromSocietyIn{}
	mi := &file_society_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UnsubscribeFromSocietyIn) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnsubscribeFromSocietyIn) ProtoMessage() {}

func (x *UnsubscribeFromSocietyIn) ProtoReflect() protoreflect.Message {
	mi := &file_society_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnsubscribeFromSocietyIn.ProtoReflect.Descriptor instead.
func (*UnsubscribeFromSocietyIn) Descriptor() ([]byte, []int) {
	return file_society_proto_rawDescGZIP(), []int{9}
}

func (x *UnsubscribeFromSocietyIn) GetSocietyId() int64 {
	if x != nil {
		return x.SocietyId
	}
	return 0
}

// Возвращение данных об отписке от сообщества
type UnsubscribeFromSocietyOut struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Получилось ли подписаться или нет
	Success bool `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
}

func (x *UnsubscribeFromSocietyOut) Reset() {
	*x = UnsubscribeFromSocietyOut{}
	mi := &file_society_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UnsubscribeFromSocietyOut) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnsubscribeFromSocietyOut) ProtoMessage() {}

func (x *UnsubscribeFromSocietyOut) ProtoReflect() protoreflect.Message {
	mi := &file_society_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnsubscribeFromSocietyOut.ProtoReflect.Descriptor instead.
func (*UnsubscribeFromSocietyOut) Descriptor() ([]byte, []int) {
	return file_society_proto_rawDescGZIP(), []int{10}
}

func (x *UnsubscribeFromSocietyOut) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

// Данные о подписчиках сообщества
type GetUsersForSocietyIn struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID сообщества
	SocietyId int64 `protobuf:"varint,1,opt,name=society_id,json=societyId,proto3" json:"society_id,omitempty"`
}

func (x *GetUsersForSocietyIn) Reset() {
	*x = GetUsersForSocietyIn{}
	mi := &file_society_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetUsersForSocietyIn) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUsersForSocietyIn) ProtoMessage() {}

func (x *GetUsersForSocietyIn) ProtoReflect() protoreflect.Message {
	mi := &file_society_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUsersForSocietyIn.ProtoReflect.Descriptor instead.
func (*GetUsersForSocietyIn) Descriptor() ([]byte, []int) {
	return file_society_proto_rawDescGZIP(), []int{11}
}

func (x *GetUsersForSocietyIn) GetSocietyId() int64 {
	if x != nil {
		return x.SocietyId
	}
	return 0
}

// Возвращение данных о подписчиках сообщества
type GetUsersForSocietyOut struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Список юзеров, подписанных на сообщество
	Users []*User `protobuf:"bytes,1,rep,name=users,proto3" json:"users,omitempty"`
}

func (x *GetUsersForSocietyOut) Reset() {
	*x = GetUsersForSocietyOut{}
	mi := &file_society_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetUsersForSocietyOut) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUsersForSocietyOut) ProtoMessage() {}

func (x *GetUsersForSocietyOut) ProtoReflect() protoreflect.Message {
	mi := &file_society_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUsersForSocietyOut.ProtoReflect.Descriptor instead.
func (*GetUsersForSocietyOut) Descriptor() ([]byte, []int) {
	return file_society_proto_rawDescGZIP(), []int{12}
}

func (x *GetUsersForSocietyOut) GetUsers() []*User {
	if x != nil {
		return x.Users
	}
	return nil
}

// Список параметров юзеров, подписанных на сообщество
type User struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Имя пользователя
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Ссылка на аватарку пользователя
	AvatarLink string `protobuf:"bytes,2,opt,name=avatar_link,json=avatarLink,proto3" json:"avatar_link,omitempty"`
}

func (x *User) Reset() {
	*x = User{}
	mi := &file_society_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *User) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*User) ProtoMessage() {}

func (x *User) ProtoReflect() protoreflect.Message {
	mi := &file_society_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use User.ProtoReflect.Descriptor instead.
func (*User) Descriptor() ([]byte, []int) {
	return file_society_proto_rawDescGZIP(), []int{13}
}

func (x *User) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *User) GetAvatarLink() string {
	if x != nil {
		return x.AvatarLink
	}
	return ""
}

// Данные о подписках юзера
type GetSocietiesForUserIn struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// UUID юзера
	UserUuid string `protobuf:"bytes,1,opt,name=user_uuid,json=userUuid,proto3" json:"user_uuid,omitempty"`
}

func (x *GetSocietiesForUserIn) Reset() {
	*x = GetSocietiesForUserIn{}
	mi := &file_society_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetSocietiesForUserIn) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSocietiesForUserIn) ProtoMessage() {}

func (x *GetSocietiesForUserIn) ProtoReflect() protoreflect.Message {
	mi := &file_society_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSocietiesForUserIn.ProtoReflect.Descriptor instead.
func (*GetSocietiesForUserIn) Descriptor() ([]byte, []int) {
	return file_society_proto_rawDescGZIP(), []int{14}
}

func (x *GetSocietiesForUserIn) GetUserUuid() string {
	if x != nil {
		return x.UserUuid
	}
	return ""
}

// Возвращение данных о подписках юзера
type GetSocietiesForUserOut struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Список сообществ, на которые подписан юзер
	Society []*Society `protobuf:"bytes,1,rep,name=society,proto3" json:"society,omitempty"`
}

func (x *GetSocietiesForUserOut) Reset() {
	*x = GetSocietiesForUserOut{}
	mi := &file_society_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetSocietiesForUserOut) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSocietiesForUserOut) ProtoMessage() {}

func (x *GetSocietiesForUserOut) ProtoReflect() protoreflect.Message {
	mi := &file_society_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSocietiesForUserOut.ProtoReflect.Descriptor instead.
func (*GetSocietiesForUserOut) Descriptor() ([]byte, []int) {
	return file_society_proto_rawDescGZIP(), []int{15}
}

func (x *GetSocietiesForUserOut) GetSociety() []*Society {
	if x != nil {
		return x.Society
	}
	return nil
}

// Данные параметров о подписках юзера
type Society struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Название сообщества
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Ссылка на аватарку сообщества
	AvatarLink string `protobuf:"bytes,2,opt,name=avatar_link,json=avatarLink,proto3" json:"avatar_link,omitempty"`
	// ID сообщества
	SocietyId int64 `protobuf:"varint,3,opt,name=society_id,json=societyId,proto3" json:"society_id,omitempty"`
}

func (x *Society) Reset() {
	*x = Society{}
	mi := &file_society_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Society) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Society) ProtoMessage() {}

func (x *Society) ProtoReflect() protoreflect.Message {
	mi := &file_society_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Society.ProtoReflect.Descriptor instead.
func (*Society) Descriptor() ([]byte, []int) {
	return file_society_proto_rawDescGZIP(), []int{16}
}

func (x *Society) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Society) GetAvatarLink() string {
	if x != nil {
		return x.AvatarLink
	}
	return ""
}

func (x *Society) GetSocietyId() int64 {
	if x != nil {
		return x.SocietyId
	}
	return 0
}

var File_society_proto protoreflect.FileDescriptor

var file_society_proto_rawDesc = []byte{
	0x0a, 0x0d, 0x73, 0x6f, 0x63, 0x69, 0x65, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0xae, 0x01, 0x0a, 0x0c, 0x53, 0x65, 0x74, 0x53, 0x6f, 0x63, 0x69, 0x65, 0x74, 0x79, 0x49, 0x6e,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x70, 0x72, 0x69,
	0x76, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x50, 0x72,
	0x69, 0x76, 0x61, 0x74, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x64, 0x69, 0x72,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x61, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0d, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x49, 0x64,
	0x22, 0x2e, 0x0a, 0x0d, 0x53, 0x65, 0x74, 0x53, 0x6f, 0x63, 0x69, 0x65, 0x74, 0x79, 0x4f, 0x75,
	0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x6f, 0x63, 0x69, 0x65, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73, 0x6f, 0x63, 0x69, 0x65, 0x74, 0x79, 0x49, 0x64,
	0x22, 0x39, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4c, 0x65, 0x76,
	0x65, 0x6c, 0x4f, 0x75, 0x74, 0x12, 0x24, 0x0a, 0x06, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4c, 0x65,
	0x76, 0x65, 0x6c, 0x52, 0x06, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x73, 0x22, 0x40, 0x0a, 0x0b, 0x41,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x22, 0x0e, 0x0a,
	0x0c, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x53, 0x6f, 0x63, 0x69, 0x65, 0x74, 0x79, 0x22, 0x42, 0x0a,
	0x11, 0x47, 0x65, 0x74, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x4f,
	0x75, 0x74, 0x12, 0x2d, 0x0a, 0x0b, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x73, 0x22, 0x52, 0x0a, 0x0a, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x35, 0x0a, 0x14, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69,
	0x62, 0x65, 0x54, 0x6f, 0x53, 0x6f, 0x63, 0x69, 0x65, 0x74, 0x79, 0x49, 0x6e, 0x12, 0x1d, 0x0a,
	0x0a, 0x73, 0x6f, 0x63, 0x69, 0x65, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x09, 0x73, 0x6f, 0x63, 0x69, 0x65, 0x74, 0x79, 0x49, 0x64, 0x22, 0x31, 0x0a, 0x15,
	0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x54, 0x6f, 0x53, 0x6f, 0x63, 0x69, 0x65,
	0x74, 0x79, 0x4f, 0x75, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x22,
	0x39, 0x0a, 0x18, 0x55, 0x6e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x46, 0x72,
	0x6f, 0x6d, 0x53, 0x6f, 0x63, 0x69, 0x65, 0x74, 0x79, 0x49, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x73,
	0x6f, 0x63, 0x69, 0x65, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x09, 0x73, 0x6f, 0x63, 0x69, 0x65, 0x74, 0x79, 0x49, 0x64, 0x22, 0x35, 0x0a, 0x19, 0x55, 0x6e,
	0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x46, 0x72, 0x6f, 0x6d, 0x53, 0x6f, 0x63,
	0x69, 0x65, 0x74, 0x79, 0x4f, 0x75, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x22, 0x35, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x73, 0x46, 0x6f, 0x72,
	0x53, 0x6f, 0x63, 0x69, 0x65, 0x74, 0x79, 0x49, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x6f, 0x63,
	0x69, 0x65, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73,
	0x6f, 0x63, 0x69, 0x65, 0x74, 0x79, 0x49, 0x64, 0x22, 0x34, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x55,
	0x73, 0x65, 0x72, 0x73, 0x46, 0x6f, 0x72, 0x53, 0x6f, 0x63, 0x69, 0x65, 0x74, 0x79, 0x4f, 0x75,
	0x74, 0x12, 0x1b, 0x0a, 0x05, 0x75, 0x73, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x05, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x05, 0x75, 0x73, 0x65, 0x72, 0x73, 0x22, 0x3b,
	0x0a, 0x04, 0x55, 0x73, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x76,
	0x61, 0x74, 0x61, 0x72, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x4c, 0x69, 0x6e, 0x6b, 0x22, 0x34, 0x0a, 0x15, 0x47,
	0x65, 0x74, 0x53, 0x6f, 0x63, 0x69, 0x65, 0x74, 0x69, 0x65, 0x73, 0x46, 0x6f, 0x72, 0x55, 0x73,
	0x65, 0x72, 0x49, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x75, 0x75, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x55, 0x75, 0x69,
	0x64, 0x22, 0x3c, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x53, 0x6f, 0x63, 0x69, 0x65, 0x74, 0x69, 0x65,
	0x73, 0x46, 0x6f, 0x72, 0x55, 0x73, 0x65, 0x72, 0x4f, 0x75, 0x74, 0x12, 0x22, 0x0a, 0x07, 0x73,
	0x6f, 0x63, 0x69, 0x65, 0x74, 0x79, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x53,
	0x6f, 0x63, 0x69, 0x65, 0x74, 0x79, 0x52, 0x07, 0x73, 0x6f, 0x63, 0x69, 0x65, 0x74, 0x79, 0x22,
	0x5d, 0x0a, 0x07, 0x53, 0x6f, 0x63, 0x69, 0x65, 0x74, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1f,
	0x0a, 0x0b, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x4c, 0x69, 0x6e, 0x6b, 0x12,
	0x1d, 0x0a, 0x0a, 0x73, 0x6f, 0x63, 0x69, 0x65, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x09, 0x73, 0x6f, 0x63, 0x69, 0x65, 0x74, 0x79, 0x49, 0x64, 0x32, 0xdb,
	0x03, 0x0a, 0x0e, 0x53, 0x6f, 0x63, 0x69, 0x65, 0x74, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x12, 0x30, 0x0a, 0x0d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x6f, 0x63, 0x69, 0x65,
	0x74, 0x79, 0x12, 0x0d, 0x2e, 0x53, 0x65, 0x74, 0x53, 0x6f, 0x63, 0x69, 0x65, 0x74, 0x79, 0x49,
	0x6e, 0x1a, 0x0e, 0x2e, 0x53, 0x65, 0x74, 0x53, 0x6f, 0x63, 0x69, 0x65, 0x74, 0x79, 0x4f, 0x75,
	0x74, 0x22, 0x00, 0x12, 0x35, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x0d, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x53, 0x6f, 0x63,
	0x69, 0x65, 0x74, 0x79, 0x1a, 0x12, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x4c, 0x65, 0x76, 0x65, 0x6c, 0x4f, 0x75, 0x74, 0x22, 0x00, 0x12, 0x35, 0x0a, 0x0e, 0x47, 0x65,
	0x74, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x0d, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x53, 0x6f, 0x63, 0x69, 0x65, 0x74, 0x79, 0x1a, 0x12, 0x2e, 0x47, 0x65,
	0x74, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x4f, 0x75, 0x74, 0x22,
	0x00, 0x12, 0x45, 0x0a, 0x12, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x54, 0x6f,
	0x53, 0x6f, 0x63, 0x69, 0x65, 0x74, 0x79, 0x12, 0x15, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72,
	0x69, 0x62, 0x65, 0x54, 0x6f, 0x53, 0x6f, 0x63, 0x69, 0x65, 0x74, 0x79, 0x49, 0x6e, 0x1a, 0x16,
	0x2e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x54, 0x6f, 0x53, 0x6f, 0x63, 0x69,
	0x65, 0x74, 0x79, 0x4f, 0x75, 0x74, 0x22, 0x00, 0x12, 0x51, 0x0a, 0x16, 0x55, 0x6e, 0x73, 0x75,
	0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x46, 0x72, 0x6f, 0x6d, 0x53, 0x6f, 0x63, 0x69, 0x65,
	0x74, 0x79, 0x12, 0x19, 0x2e, 0x55, 0x6e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65,
	0x46, 0x72, 0x6f, 0x6d, 0x53, 0x6f, 0x63, 0x69, 0x65, 0x74, 0x79, 0x49, 0x6e, 0x1a, 0x1a, 0x2e,
	0x55, 0x6e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x46, 0x72, 0x6f, 0x6d, 0x53,
	0x6f, 0x63, 0x69, 0x65, 0x74, 0x79, 0x4f, 0x75, 0x74, 0x22, 0x00, 0x12, 0x45, 0x0a, 0x12, 0x47,
	0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x73, 0x46, 0x6f, 0x72, 0x53, 0x6f, 0x63, 0x69, 0x65, 0x74,
	0x79, 0x12, 0x15, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x73, 0x46, 0x6f, 0x72, 0x53,
	0x6f, 0x63, 0x69, 0x65, 0x74, 0x79, 0x49, 0x6e, 0x1a, 0x16, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x73,
	0x65, 0x72, 0x73, 0x46, 0x6f, 0x72, 0x53, 0x6f, 0x63, 0x69, 0x65, 0x74, 0x79, 0x4f, 0x75, 0x74,
	0x22, 0x00, 0x12, 0x48, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x53, 0x6f, 0x63, 0x69, 0x65, 0x74, 0x69,
	0x65, 0x73, 0x46, 0x6f, 0x72, 0x55, 0x73, 0x65, 0x72, 0x12, 0x16, 0x2e, 0x47, 0x65, 0x74, 0x53,
	0x6f, 0x63, 0x69, 0x65, 0x74, 0x69, 0x65, 0x73, 0x46, 0x6f, 0x72, 0x55, 0x73, 0x65, 0x72, 0x49,
	0x6e, 0x1a, 0x17, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x6f, 0x63, 0x69, 0x65, 0x74, 0x69, 0x65, 0x73,
	0x46, 0x6f, 0x72, 0x55, 0x73, 0x65, 0x72, 0x4f, 0x75, 0x74, 0x22, 0x00, 0x42, 0x11, 0x5a, 0x0f,
	0x2e, 0x2f, 0x73, 0x6f, 0x63, 0x69, 0x65, 0x74, 0x79, 0x2d, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_society_proto_rawDescOnce sync.Once
	file_society_proto_rawDescData = file_society_proto_rawDesc
)

func file_society_proto_rawDescGZIP() []byte {
	file_society_proto_rawDescOnce.Do(func() {
		file_society_proto_rawDescData = protoimpl.X.CompressGZIP(file_society_proto_rawDescData)
	})
	return file_society_proto_rawDescData
}

var file_society_proto_msgTypes = make([]protoimpl.MessageInfo, 17)
var file_society_proto_goTypes = []any{
	(*SetSocietyIn)(nil),              // 0: SetSocietyIn
	(*SetSocietyOut)(nil),             // 1: SetSocietyOut
	(*GetAccessLevelOut)(nil),         // 2: GetAccessLevelOut
	(*AccessLevel)(nil),               // 3: AccessLevel
	(*EmptySociety)(nil),              // 4: EmptySociety
	(*GetPermissionsOut)(nil),         // 5: GetPermissionsOut
	(*Permission)(nil),                // 6: Permission
	(*SubscribeToSocietyIn)(nil),      // 7: SubscribeToSocietyIn
	(*SubscribeToSocietyOut)(nil),     // 8: SubscribeToSocietyOut
	(*UnsubscribeFromSocietyIn)(nil),  // 9: UnsubscribeFromSocietyIn
	(*UnsubscribeFromSocietyOut)(nil), // 10: UnsubscribeFromSocietyOut
	(*GetUsersForSocietyIn)(nil),      // 11: GetUsersForSocietyIn
	(*GetUsersForSocietyOut)(nil),     // 12: GetUsersForSocietyOut
	(*User)(nil),                      // 13: User
	(*GetSocietiesForUserIn)(nil),     // 14: GetSocietiesForUserIn
	(*GetSocietiesForUserOut)(nil),    // 15: GetSocietiesForUserOut
	(*Society)(nil),                   // 16: Society
}
var file_society_proto_depIdxs = []int32{
	3,  // 0: GetAccessLevelOut.levels:type_name -> AccessLevel
	6,  // 1: GetPermissionsOut.permissions:type_name -> Permission
	13, // 2: GetUsersForSocietyOut.users:type_name -> User
	16, // 3: GetSocietiesForUserOut.society:type_name -> Society
	0,  // 4: SocietyService.CreateSociety:input_type -> SetSocietyIn
	4,  // 5: SocietyService.GetAccessLevel:input_type -> EmptySociety
	4,  // 6: SocietyService.GetPermissions:input_type -> EmptySociety
	7,  // 7: SocietyService.SubscribeToSociety:input_type -> SubscribeToSocietyIn
	9,  // 8: SocietyService.UnsubscribeFromSociety:input_type -> UnsubscribeFromSocietyIn
	11, // 9: SocietyService.GetUsersForSociety:input_type -> GetUsersForSocietyIn
	14, // 10: SocietyService.GetSocietiesForUser:input_type -> GetSocietiesForUserIn
	1,  // 11: SocietyService.CreateSociety:output_type -> SetSocietyOut
	2,  // 12: SocietyService.GetAccessLevel:output_type -> GetAccessLevelOut
	5,  // 13: SocietyService.GetPermissions:output_type -> GetPermissionsOut
	8,  // 14: SocietyService.SubscribeToSociety:output_type -> SubscribeToSocietyOut
	10, // 15: SocietyService.UnsubscribeFromSociety:output_type -> UnsubscribeFromSocietyOut
	12, // 16: SocietyService.GetUsersForSociety:output_type -> GetUsersForSocietyOut
	15, // 17: SocietyService.GetSocietiesForUser:output_type -> GetSocietiesForUserOut
	11, // [11:18] is the sub-list for method output_type
	4,  // [4:11] is the sub-list for method input_type
	4,  // [4:4] is the sub-list for extension type_name
	4,  // [4:4] is the sub-list for extension extendee
	0,  // [0:4] is the sub-list for field type_name
}

func init() { file_society_proto_init() }
func file_society_proto_init() {
	if File_society_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_society_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   17,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_society_proto_goTypes,
		DependencyIndexes: file_society_proto_depIdxs,
		MessageInfos:      file_society_proto_msgTypes,
	}.Build()
	File_society_proto = out.File
	file_society_proto_rawDesc = nil
	file_society_proto_goTypes = nil
	file_society_proto_depIdxs = nil
}

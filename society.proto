syntax = "proto3";

option go_package = "./society-proto";

service SocietyService {
  rpc CreateSociety(SetSocietyIn) returns (SetSocietyOut){};
  rpc GetAccessLevel(Empty) returns (GetAccessLevelOut){};
  rpc GetPermissions(EmptySociety) returns (GetPermissionsOut){};
  rpc SubscribeToSociety(SubscribeToSocietyIn) returns (SubscribeToSocietyOut){};
  rpc UnsubscribeFromSociety(UnsubscribeFromSocietyIn) returns (UnsubscribeFromSocietyOut){};
  rpc GetUsersForSociety(GetUsersForSocietyIn) returns (GetUsersForSocietyOut){};
  rpc GetSocietiesForUser(GetSocietiesForUserIn) returns (GetSocietiesForUserOut){};
}

message SetSocietyIn {
  string name = 1;
  string description = 2;
  bool is_private = 3;
  int64 direction_id = 4;
  int64 access_level_id = 5;
}

message SetSocietyOut {
  int64 society_id = 1;
}

message GetAccessLevelOut {
  repeated AccessLevel levels = 1;
}

message AccessLevel {
  int64 id = 1;
  string access_level = 2;
}

message Empty {}

message EmptySociety {}

message GetPermissionsOut {
  repeated Permission permissions = 1;
}

message Permission {
  int64 id = 1;
  string name = 2;
  string description = 3;
}

message SubscribeToSocietyIn {
  int64 society_id = 1;
}

message SubscribeToSocietyOut {
  bool success = 1;
}

message UnsubscribeFromSocietyIn {
  int64 society_id = 1;
}

message UnsubscribeFromSocietyOut {
  bool success = 1;
}

message GetUsersForSocietyIn {
  int64 society_id = 1;
}

message GetUsersForSocietyOut {
  repeated User users = 1;
}

message User {
  string name = 1;
  string avatar_link = 2;
}

message GetSocietiesForUserIn {
  string user_uuid = 1;
}

message GetSocietiesForUserOut {
  repeated Society society= 1;
}

message Society {
  string name = 1;
  string avatar_link = 2;
  int64 society_id = 3;
}
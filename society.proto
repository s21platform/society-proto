syntax = "proto3";

option go_package = "./society-proto";

service SocietyService {
  //Метод создания сообщества
  rpc CreateSociety(SetSocietyIn) returns (SetSocietyOut){};
  //Метод получения уровней доступа
  rpc GetAccessLevel(EmptySociety) returns (GetAccessLevelOut){};
  // Метод получения разрешения
  rpc GetPermissions(EmptySociety) returns (GetPermissionsOut){};
  rpc SubscribeToSociety(SubscribeToSocietyIn) returns (SubscribeToSocietyOut){};
  rpc UnsubscribeFromSociety(UnsubscribeFromSocietyIn) returns (UnsubscribeFromSocietyOut){};
  rpc GetUsersForSociety(GetUsersForSocietyIn) returns (GetUsersForSocietyOut){};
  rpc GetSocietiesForUser(GetSocietiesForUserIn) returns (GetSocietiesForUserOut){};
}

//Данные для создания сообщества
message SetSocietyIn {
  //Имя
  string name = 1;
  //Описание
  string description = 2;
  //Приватность
  bool is_private = 3;
  //Направление
  int64 direction_id = 4;
  //Уровень доступа
  int64 access_level_id = 5;
}

//Объект ответа создания сообщества
message SetSocietyOut {
  //id созданного сообщества
  int64 society_id = 1;
}

//Объект возвращения уровней доступа
message GetAccessLevelOut {
  // Список уровней доступа
  repeated AccessLevel levels = 1;
}

//Описание уровней доступа
message AccessLevel {
  //Идентификатор уровня доступа
  int64 id = 1;
  // Название или описание уровня доступа
  string access_level = 2;
}

//Пустой объект
message EmptySociety {}

//Объект возвращения списка разрешений
message GetPermissionsOut {
  // Список разрешений.
  repeated Permission permissions = 1;
}

//Описание разрешения
message Permission {
  //Уникальный идентификатор разрешения
  int64 id = 1;
  //Название разрешения
  string name = 2;
  //Описание разрешения
  string description = 3;
}

message SubscribeToSocietyIn {
  int64 society_id = 1;
}

message SubscribeToSocietyOut {
  bool success = 1;
}

message UnsubscribeFromSocietyIn {
  int64 society_id = 1;
}

message UnsubscribeFromSocietyOut {
  bool success = 1;
}

message GetUsersForSocietyIn {
  int64 society_id = 1;
}

message GetUsersForSocietyOut {
  repeated User users = 1;
}

message User {
  string name = 1;
  string avatar_link = 2;
}

message GetSocietiesForUserIn {
  string user_uuid = 1;
}

message GetSocietiesForUserOut {
  repeated Society society= 1;
}

message Society {
  string name = 1;
  string avatar_link = 2;
  int64 society_id = 3;
}
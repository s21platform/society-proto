syntax = "proto3";

option go_package = "./society-proto";

service SocietyService {
  //Метод создания сообщества
  rpc CreateSociety(SetSocietyIn) returns (SetSocietyOut){};
  //Метод получения уровней доступа
  rpc GetAccessLevel(EmptySociety) returns (GetAccessLevelOut){};
  // Метод получения разрешения
  rpc GetPermissions(EmptySociety) returns (GetPermissionsOut){};
  //Подписка на сообщество
  rpc SubscribeToSociety(SubscribeToSocietyIn) returns (SubscribeToSocietyOut){};
  //Отписка от сообщества
  rpc UnsubscribeFromSociety(UnsubscribeFromSocietyIn) returns (UnsubscribeFromSocietyOut){};
  //Список юзеров, подписанных на сообщество
  rpc GetUsersForSociety(GetUsersForSocietyIn) returns (GetUsersForSocietyOut){};
  //Список сообществ, на которые подписан юзер
  rpc GetSocietiesForUser(GetSocietiesForUserIn) returns (GetSocietiesForUserOut){};
  //Метод для получения информации о сообществе
  rpc GetSocietyInfo(GetSocietyInfoIn) returns (GetSocietyInfoOut){};
  //Метод для получения списка сообществ
  rpc GetSocietyWithOffset(GetSocietyWithOffsetIn) returns (GetSocietyWithOffsetOut){};
}

//Данные для создания сообщества
message SetSocietyIn {
  //Имя
  string name = 1;
  //Описание
  string description = 2;
  //Приватность
  bool is_private = 3;
  //Направление
  int64 direction_id = 4;
  //Уровень доступа
  int64 access_level_id = 5;
}

//Объект ответа создания сообщества
message SetSocietyOut {
  //id созданного сообщества
  int64 society_id = 1;
}

//Объект возвращения уровней доступа
message GetAccessLevelOut {
  // Список уровней доступа
  repeated AccessLevel levels = 1;
}

//Описание уровней доступа
message AccessLevel {
  //Идентификатор уровня доступа
  int64 id = 1;
  // Название или описание уровня доступа
  string access_level = 2;
}

//Пустой объект
message EmptySociety {}

//Объект возвращения списка разрешений
message GetPermissionsOut {
  // Список разрешений.
  repeated Permission permissions = 1;
}

//Описание разрешения
message Permission {
  //Уникальный идентификатор разрешения
  int64 id = 1;
  //Название разрешения
  string name = 2;
  //Описание разрешения
  string description = 3;
}

//Данные для подписки на сообщество
message SubscribeToSocietyIn {
  //ID сообщества
  int64 society_id = 1;
}

//Возвращение данных о подписке на сообщество
message SubscribeToSocietyOut {
  //Получилось ли подписаться или нет
  bool success = 1;
}

//Данные для отписки от сообщества
message UnsubscribeFromSocietyIn {
  //ID сообщества
  int64 society_id = 1;
}

//Возвращение данных об отписке от сообщества
message UnsubscribeFromSocietyOut {
  //Получилось ли подписаться или нет
  bool success = 1;
}

//Данные о подписчиках сообщества
message GetUsersForSocietyIn {
  //ID сообщества
  int64 society_id = 1;
}

//Возвращение данных о подписчиках сообщества
message GetUsersForSocietyOut {
  //Список юзеров, подписанных на сообщество
  repeated UserSociety users = 1;
}

//Список параметров юзеров, подписанных на сообщество
message UserSociety {
  //Имя пользователя
  string name = 1;
  //Ссылка на аватарку пользователя
  string avatar_link = 2;
}

//Данные о подписках юзера
message GetSocietiesForUserIn {
  //UUID юзера
  string user_uuid = 1;
}

//Возвращение данных о подписках юзера
message GetSocietiesForUserOut {
  //Список сообществ, на которые подписан юзер
  repeated Society society= 1;
}

//Данные параметров о подписках юзера
message Society {
  //Название сообщества
  string name = 1;
  //Ссылка на аватарку сообщества
  string avatar_link = 2;
  //ID сообщества
  int64 society_id = 3;
}

//Данные параметра для получения сообщества
message GetSocietyInfoIn{
  //id необходимого сообщества
  int64 id = 1;
}

//Данные, возвращаемые о информации сообщества
message GetSocietyInfoOut{
  //Наименование
  string name = 1;
  //Описание сообщества
  string description = 2;
  //UUID владельца сообщества
  string ownerUUID = 3;
  //URL фотографии сообщества
  string photoUrl = 4;
  //Приватность сообщества
  bool isPrivate  = 5;
}

//Данные, для получения списка сообществ
message GetSocietyWithOffsetIn{
  //Количество возвращаемых записей
  int64 limit = 1;
  //С какой записи начинаем
  int64 offset = 2;
  //Если поле пустое - выводит все группы, иначе поиск по подстроке подходящие
  string name = 3;
}

//Данные, возвращаемые при получении списка сообществ
message GetSocietyWithOffsetOut{
  //Список сообществ, на которые подписан юзер
  repeated Society society = 1;
  //Общее кол-во возвращенных сообществ
  int64 total = 2;
  //Состоит ли пользователь в группе или нет true - cocтоит, false - не состоит
  bool isMember = 3;
}